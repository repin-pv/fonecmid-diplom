#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
КонецПроцедуры 

&НаКлиенте
Процедура ВКМ_ВремяНачалаРаботПриИзменении(Элемент)
	
	НачалоПериода = Объект.ВКМ_ВремяНачалаРабот;
	КонецПериода = Объект.ВКМ_ВремяОкончанияРабот;
	
	Объект.ВКМ_Комментарий = ПолучитьРазностьДатВЧасах(НачалоПериода, КонецПериода);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВКМ_ВремяОкончанияРаботПриИзменении(Элемент)
	
	НачалоПериода = Объект.ВКМ_ВремяНачалаРабот;
	КонецПериода = Объект.ВКМ_ВремяОкончанияРабот;
	
	Объект.ВКМ_Комментарий = ПолучитьРазностьДатВЧасах(НачалоПериода, КонецПериода);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВКМ_ОбслуживаниеКлиента", , Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Текст = "Создан новый документ";
	ЗаписатьУведомленияТелеграмБоту(ТекущийОбъект, Текст);
	
КонецПроцедуры

Процедура ЗаписатьУведомленияТелеграмБоту(ТекущийОбъект, Текст)
	
	НачатьТранзакцию();
	
	Попытка
		
		ОбъектУведомлениеТГ = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		ОбъектУведомлениеТГ.Наименование = ТекущийОбъект;
		ОбъектУведомлениеТГ.Текст = Текст;
		
		ОбъектУведомлениеТГ.Записать();
		
		// чтение или запись данных
		//ДокументОбъект.Записать()
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		// дополнительные действия по обработке исключения
	КонецПопытки;
	
КонецПроцедуры


#КонецОбласти

#Область РазмещенияФункций

&НаКлиенте
Функция ПолучитьРазностьДатВЧасах(НачалоПериода, КонецПериода)
	
	РазностьВЧасах = (НачалоМинуты(КонецПериода) - НачалоМинуты(НачалоПериода)) /3600;
	
	КоличествоЧасов = Окр(РазностьВЧасах, 1, 0);
	
	СтрокаЧасовКОплате = "час(ов) к оплате";
	
	Возврат СтрШаблон("%1 %2", КоличествоЧасов, СтрокаЧасовКОплате);
	
КонецФункции

#КонецОбласти

#КонецОбласти



